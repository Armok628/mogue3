#!/usr/bin/perl
use strict;

# Generate item header (list of all items)
open(my $src,'>','src/items.h');
print $src
"#ifndef ITEMS_H
#define ITEMS_H
#include \"area.h\"
#include \"input.h\"
#include \"types.h\"\n";
my @items=('src/items.c',@ARGV);
for (@items) {
	open(my $et,'<',$_);
	for (<$et>) {print $src "extern itype_t $1;\n" if (/^itype_t (\w*)=/)}
	close($et);
}
print $src "#endif\n";
close($src);

# Generate creature header (list of all creatures)
open(my $src,'>','src/creatures.h');
print $src
"#ifndef CREATURES_H
#define CREATURES_H
#include \"items.h\"
#include \"spells.h\"
#include \"types.h\"\n";
my @creatures=('src/creatures.c',@ARGV);
for (@creatures) {
	open(my $et,'<',$_);
	for (<$et>) {print $src "extern etype_t $1;\n" if (/^etype_t (\w*)=/)}
	close($et);
}
print $src "#endif\n";
close($src);

# Generate entityspawn
open(my $src,'>','src/spawn.c');
print $src "#include \"spawn.h\"\netype_t *entityspawn[]={\n";
open(my $et,'<','src/creatures.h');
for (<$et>) {print $src "\t&$1,\n" if (/^extern etype_t (\w*);/)}
close($et);
print $src "};\nint entityspawn_size=sizeof(entityspawn)/sizeof(etype_t *);\n";
# Generate itemspawn
print $src "itype_t *itemspawn[]={\n";
open(my $et,'<','src/items.h');
for (<$et>) {print $src "\t&$1,\n" if (/^extern itype_t (\w*);/)}
close($et);
print $src "};\nint itemspawn_size=sizeof(itemspawn)/sizeof(itype_t *);\n";
close($src);
